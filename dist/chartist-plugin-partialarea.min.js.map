{"version":3,"sources":["chartist-plugin-partialarea.js"],"names":["root","factory","define","amd","returnExportsGlobal","exports","module","this","window","document","Chartist","createMasks","data","options","defs","svg","querySelector","elem","projectedThreshold","Math","round","chartRect","width","threshold","x1","id","x","y","height","defaultOptions","plugins","ctPartialArea","extend","chart","Line","on","type","element","attr","clip-path","ctpartialarea"],"mappings":";;;;;;CAAC,SAAUA,EAAMC,GACO,kBAAXC,SAAyBA,OAAOC,IAEzCD,UAAW,WACT,MAAQF,GAAKI,oBAAsBH,MAET,gBAAZI,SAIhBC,OAAOD,QAAUJ,IAEjBD,EAAK,kCAAoCC,KAE3CM,KAAM,WAwDN,MAhDC,UAAUC,EAAQC,EAAUC,GACzB,YAMA,SAASC,GAAYC,EAAMC,GACvB,GAAIC,GAAOF,EAAKG,IAAIC,cAAc,SAAWJ,EAAKG,IAAIE,KAAK,QACvDC,EAAqBC,KAAKC,MAAMR,EAAKS,UAAUC,QAAUT,EAAQU,UAAY,KAAOX,EAAKS,UAAUG,EAWvG,OATAV,GACKG,KAAK,YAAcQ,GAAI,4BACvBR,KAAK,QACFS,EAAG,EACHC,EAAG,EACHL,MAAOJ,EACPU,OAAQhB,EAAKG,IAAIa,WAGlBd,EAjBX,GAAIe,IACAN,UAAW,IAmBfb,GAASoB,QAAUpB,EAASoB,YAC5BpB,EAASoB,QAAQC,cAAgB,SAAUlB,GAIvC,MAFAA,GAAUH,EAASsB,UAAWH,EAAgBhB,GAEvC,SAAUoB,GACTA,YAAiBvB,GAASwB,OAC1BD,EAAME,GAAG,OAAQ,SAAUvB,GACL,SAAdA,EAAKwB,MACLxB,EAAKyB,QACAC,MACGC,YAAa,oCAM7BN,EAAME,GAAG,UAAW,SAAUvB,GAC1BD,EAAYC,EAAMC,SAKpCL,OAAQC,SAAUC,UAEbA,SAASoB,QAAQU","file":"chartist-plugin-partialarea.min.js","sourcesContent":["(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], function () {\n      return (root.returnExportsGlobal = factory());\n    });\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like enviroments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    root['Chartist.plugins.ctpartialarea'] = factory();\n  }\n}(this, function () {\n\n  /**\n   * Chartist.js plugin to restrict the area below a line chart up to a configurable value on the X axis.\n   *\n   */\n\n  /* global Chartist */\n  (function (window, document, Chartist) {\n      'use strict';\n\n      var defaultOptions = {\n          threshold: 100\n      };\n\n      function createMasks(data, options) {\n          var defs = data.svg.querySelector('defs') || data.svg.elem('defs');\n          var projectedThreshold = Math.round(data.chartRect.width() * options.threshold / 100) + data.chartRect.x1;\n\n          defs\n              .elem('clipPath', { id: 'plugin-partialarea-mask' })\n              .elem('rect', {\n                  x: 0,\n                  y: 0,\n                  width: projectedThreshold,\n                  height: data.svg.height()\n              });\n\n          return defs;\n      }\n\n      Chartist.plugins = Chartist.plugins || {};\n      Chartist.plugins.ctPartialArea = function (options) {\n\n          options = Chartist.extend({}, defaultOptions, options);\n\n          return function (chart) {\n              if (chart instanceof Chartist.Line) {\n                  chart.on('draw', function (data) {\n                      if (data.type === 'area') {\n                          data.element\n                              .attr({\n                                  'clip-path': 'url(#plugin-partialarea-mask)'\n                              });\n                      }\n                  });\n\n                  // On the created event, create the mask definition used to mask the graph\n                  chart.on('created', function (data) {\n                      createMasks(data, options);\n                  });\n              }\n          };\n      };\n  }(window, document, Chartist));\n\n  return Chartist.plugins.ctpartialarea;\n\n}));\n"]}